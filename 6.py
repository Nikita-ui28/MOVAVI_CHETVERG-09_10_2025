import telebot

TOKEN = '7628595465:AAHgUHi-smK7UE8XayKD8ms_EBTF6PsqV-4'
bot = telebot.TeleBot(TOKEN)

users = {}

signals = [
    '–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É',
    '–≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏',
    '–æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é',
    '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π'
]


@bot.message_handler(commands=['start'])
def start_handler(message):
    txt = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n‚Ä¢ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏\n‚Ä¢ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"
    )
    users[message.chat.id] = []
    bot.send_message(message.chat.id, txt)


@bot.message_handler(content_types=['text'])
def handle_message(message):
    txt = message.text.strip().lower()

    if txt in signals:
        if txt == signals[0]:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏')
            bot.register_next_step_handler(message, add_task)

        elif txt == signals[1]:
            show_tasks(message)

        elif txt == signals[2]:
            mark_done(message)

        elif txt == signals[3]:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ')
            bot.register_next_step_handler(message, math)


def add_task(message):
    task = {
        'task': message.text,
        'done': False
    }
    users[message.chat.id].append(task)
    bot.send_message(message.chat.id, '‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')


def show_tasks(message):
    user_id = message.chat.id
    if user_id not in users or not users[user_id]:
        bot.send_message(message.chat.id, 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á')
        return

    tasks_text = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for i, task in enumerate(users[user_id], 1):
        status = "‚úÖ" if task['done'] else "‚è≥"
        tasks_text += f"{i}. {status} {task['task']}\n"

    bot.send_message(message.chat.id, tasks_text)


def mark_done(message):
    user_id = message.chat.id
    if user_id not in users or not users[user_id]:
        bot.send_message(message.chat.id, '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏')
        return

    tasks_text = "‚úÖ –í–≤–µ–¥–∏—Ç–µ –ù–û–ú–ï–† –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:\n\n"
    for i, task in enumerate(users[user_id], 1):
        status = "‚úÖ" if task['done'] else "‚è≥"
        tasks_text += f"{i}. {status} {task['task']}\n"

    bot.send_message(message.chat.id, tasks_text)
    bot.register_next_step_handler(message, process_done_task)


def process_done_task(message):
    user_id = message.chat.id
    if not message.text.isdigit():
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!')
        return

    task_num = int(message.text)
    if 1 <= task_num <= len(users[user_id]):
        users[user_id][task_num - 1]['done'] = True
        task_name = users[user_id][task_num - 1]['task']
        bot.send_message(message.chat.id, f'‚úÖ –ó–∞–¥–∞—á–∞ "{task_name}" –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!')
    else:
        bot.send_message(message.chat.id, f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {len(users[user_id])}')


def math(message):
    try:
        result = eval(message.text)
        task_text = f"{message.text} = {result}"

        task = {
            'task': task_text,
            'done': False
        }
        users[message.chat.id].append(task)
        bot.send_message(message.chat.id, f'‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {task_text}')
    except:
        bot.send_message(message.chat.id, '‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏')


print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
bot.polling(
    none_stop=True,
    interval=1
)